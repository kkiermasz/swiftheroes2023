sil_stage canonical

import Builtin
import Swift
import SwiftShims

protocol Swimmer {
  func swim()
}

struct Duck : Swimmer {
  func swim()
  init()
}

struct Fish : Swimmer {
  func swim()
  init()
}

@_hasStorage @_hasInitialValue let swimmers: [any Swimmer] { get }

// swimmers
sil_global hidden [let] @$s7swimmer8swimmersSayAA7Swimmer_pGvp : $Array<any Swimmer>

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
[%1: noescape **]
[global: read,write,copy,allocate,deinit_barrier]
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @$s7swimmer8swimmersSayAA7Swimmer_pGvp // id: %2
  %3 = global_addr @$s7swimmer8swimmersSayAA7Swimmer_pGvp : $*Array<any Swimmer> // user: %33
  %4 = integer_literal $Builtin.Word, 3           // user: %7
  %5 = integer_literal $Builtin.Int64, 3          // user: %6
  %6 = struct $Int (%5 : $Builtin.Int64)          // user: %11
  %7 = alloc_ref [tail_elems $any Swimmer * %4 : $Builtin.Word] $_ContiguousArrayStorage<any Swimmer> // users: %28, %8
  %8 = upcast %7 : $_ContiguousArrayStorage<any Swimmer> to $__ContiguousArrayStorageBase // users: %15, %13
  %9 = integer_literal $Builtin.Int64, 6          // user: %10
  %10 = struct $UInt (%9 : $Builtin.Int64)        // user: %11
  %11 = struct $_SwiftArrayBodyStorage (%6 : $Int, %10 : $UInt) // user: %12
  %12 = struct $_ArrayBody (%11 : $_SwiftArrayBodyStorage) // user: %14
  %13 = ref_element_addr %8 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %14
  store %12 to %13 : $*_ArrayBody                 // id: %14
  %15 = ref_tail_addr %8 : $__ContiguousArrayStorageBase, $any Swimmer // users: %17, %20, %24
  %16 = struct $Duck ()                           // users: %22, %18
  %17 = init_existential_addr %15 : $*any Swimmer, $Duck // user: %18
  store %16 to %17 : $*Duck                       // id: %18
  %19 = integer_literal $Builtin.Word, 1          // user: %20
  %20 = index_addr %15 : $*any Swimmer, %19 : $Builtin.Word // user: %21
  %21 = init_existential_addr %20 : $*any Swimmer, $Duck // user: %22
  store %16 to %21 : $*Duck                       // id: %22
  %23 = integer_literal $Builtin.Word, 2          // user: %24
  %24 = index_addr %15 : $*any Swimmer, %23 : $Builtin.Word // user: %26
  %25 = struct $Fish ()                           // user: %27
  %26 = init_existential_addr %24 : $*any Swimmer, $Fish // user: %27
  store %25 to %26 : $*Fish                       // id: %27
  %28 = end_cow_mutation %7 : $_ContiguousArrayStorage<any Swimmer> // user: %29
  %29 = unchecked_ref_cast %28 : $_ContiguousArrayStorage<any Swimmer> to $Builtin.BridgeObject // user: %30
  %30 = struct $_BridgeStorage<__ContiguousArrayStorageBase> (%29 : $Builtin.BridgeObject) // user: %31
  %31 = struct $_ArrayBuffer<any Swimmer> (%30 : $_BridgeStorage<__ContiguousArrayStorageBase>) // user: %32
  %32 = struct $Array<any Swimmer> (%31 : $_ArrayBuffer<any Swimmer>) // user: %33
  store %32 to %3 : $*Array<any Swimmer>          // id: %33
  %34 = integer_literal $Builtin.Int32, 0         // user: %35
  %35 = struct $Int32 (%34 : $Builtin.Int32)      // user: %36
  return %35 : $Int32                             // id: %36
} // end sil function 'main'

// Duck.swim()
sil hidden @$s7swimmer4DuckV4swimyyF : $@convention(method) (Duck) -> () {
[global: ]
// %0 "self"                                      // user: %1
bb0(%0 : $Duck):
  debug_value %0 : $Duck, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s7swimmer4DuckV4swimyyF'

// Duck.init()
sil hidden @$s7swimmer4DuckVACycfC : $@convention(method) (@thin Duck.Type) -> Duck {
[global: ]
// %0 "$metatype"
bb0(%0 : $@thin Duck.Type):
  %1 = struct $Duck ()                            // user: %2
  return %1 : $Duck                               // id: %2
} // end sil function '$s7swimmer4DuckVACycfC'

// protocol witness for Swimmer.swim() in conformance Duck
sil private [transparent] [thunk] @$s7swimmer4DuckVAA7SwimmerA2aDP4swimyyFTW : $@convention(witness_method: Swimmer) (@in_guaranteed Duck) -> () {
[global: ]
bb0(%0 : $*Duck):
  %1 = tuple ()                                   // user: %2
  return %1 : $()                                 // id: %2
} // end sil function '$s7swimmer4DuckVAA7SwimmerA2aDP4swimyyFTW'

// Fish.swim()
sil hidden @$s7swimmer4FishV4swimyyF : $@convention(method) (Fish) -> () {
[global: ]
// %0 "self"                                      // user: %1
bb0(%0 : $Fish):
  debug_value %0 : $Fish, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$s7swimmer4FishV4swimyyF'

// Fish.init()
sil hidden @$s7swimmer4FishVACycfC : $@convention(method) (@thin Fish.Type) -> Fish {
[global: ]
// %0 "$metatype"
bb0(%0 : $@thin Fish.Type):
  %1 = struct $Fish ()                            // user: %2
  return %1 : $Fish                               // id: %2
} // end sil function '$s7swimmer4FishVACycfC'

// protocol witness for Swimmer.swim() in conformance Fish
sil private [transparent] [thunk] @$s7swimmer4FishVAA7SwimmerA2aDP4swimyyFTW : $@convention(witness_method: Swimmer) (@in_guaranteed Fish) -> () {
[global: ]
bb0(%0 : $*Fish):
  %1 = tuple ()                                   // user: %2
  return %1 : $()                                 // id: %2
} // end sil function '$s7swimmer4FishVAA7SwimmerA2aDP4swimyyFTW'

// __SwiftNativeNSArrayWithContiguousStorage.__allocating_init()
sil public_external [exact_self_class] @$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC : $@convention(method) (@thick __SwiftNativeNSArrayWithContiguousStorage.Type) -> @owned __SwiftNativeNSArrayWithContiguousStorage {
bb0(%0 : $@thick __SwiftNativeNSArrayWithContiguousStorage.Type):
  %1 = alloc_ref $__SwiftNativeNSArrayWithContiguousStorage // user: %2
  return %1 : $__SwiftNativeNSArrayWithContiguousStorage // id: %2
} // end sil function '$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC'

// _ContiguousArrayStorage.__allocating_init(_doNotCallMeBase:)
sil public_external [exact_self_class] @$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfC : $@convention(method) <Element> (@thick _ContiguousArrayStorage<Element>.Type) -> @owned _ContiguousArrayStorage<Element> {
bb0(%0 : $@thick _ContiguousArrayStorage<Element>.Type):
  %1 = alloc_ref $_ContiguousArrayStorage<Element> // user: %3
  // function_ref _ContiguousArrayStorage.init(_doNotCallMeBase:)
  %2 = function_ref @$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfc : $@convention(method) <τ_0_0> (@owned _ContiguousArrayStorage<τ_0_0>) -> @owned _ContiguousArrayStorage<τ_0_0> // user: %3
  %3 = apply %2<Element>(%1) : $@convention(method) <τ_0_0> (@owned _ContiguousArrayStorage<τ_0_0>) -> @owned _ContiguousArrayStorage<τ_0_0> // user: %4
  return %3 : $_ContiguousArrayStorage<Element>   // id: %4
} // end sil function '$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfC'

// _ContiguousArrayStorage.canStoreElements(ofDynamicType:)
sil public_external @$ss23_ContiguousArrayStorageC16canStoreElements13ofDynamicTypeSbypXp_tF : $@convention(method) <Element> (@thick any Any.Type, @guaranteed _ContiguousArrayStorage<Element>) -> Bool {
[%1: noescape **]
// %0                                             // user: %2
bb0(%0 : $@thick any Any.Type, %1 : $_ContiguousArrayStorage<Element>):
  checked_cast_br %0 : $@thick any Any.Type to Element.Type, bb2, bb1 // id: %2

bb1:                                              // Preds: bb0
  %3 = integer_literal $Builtin.Int1, 0           // user: %4
  br bb3(%3 : $Builtin.Int1)                      // id: %4

bb2(%5 : $@thick Element.Type):                   // Preds: bb0
  %6 = integer_literal $Builtin.Int1, -1          // user: %7
  br bb3(%6 : $Builtin.Int1)                      // id: %7

// %8                                             // user: %9
bb3(%8 : $Builtin.Int1):                          // Preds: bb2 bb1
  %9 = struct $Bool (%8 : $Builtin.Int1)          // user: %10
  return %9 : $Bool                               // id: %10
} // end sil function '$ss23_ContiguousArrayStorageC16canStoreElements13ofDynamicTypeSbypXp_tF'

// _ContiguousArrayStorage.staticElementType.getter
sil public_external @$ss23_ContiguousArrayStorageC17staticElementTypeypXpvg : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @thick any Any.Type {
[%0: noescape **]
bb0(%0 : $_ContiguousArrayStorage<Element>):
  %1 = metatype $@thick Element.Type              // user: %2
  %2 = init_existential_metatype %1 : $@thick Element.Type, $@thick any Any.Type // user: %3
  return %2 : $@thick any Any.Type                // id: %3
} // end sil function '$ss23_ContiguousArrayStorageC17staticElementTypeypXpvg'

// _ContiguousArrayStorage.__deallocating_deinit
sil public_external @$ss23_ContiguousArrayStorageCfD : $@convention(method) <Element> (@owned _ContiguousArrayStorage<Element>) -> () {
[%0: noescape, noescape c*.v**]
// %0                                             // user: %2
bb0(%0 : $_ContiguousArrayStorage<Element>):
  // function_ref _ContiguousArrayStorage.deinit
  %1 = function_ref @$ss23_ContiguousArrayStorageCfd : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> @owned Builtin.NativeObject // user: %2
  %2 = apply %1<Element>(%0) : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> @owned Builtin.NativeObject // user: %3
  %3 = unchecked_ref_cast %2 : $Builtin.NativeObject to $_ContiguousArrayStorage<Element> // user: %4
  dealloc_ref %3 : $_ContiguousArrayStorage<Element> // id: %4
  %5 = tuple ()                                   // user: %6
  return %5 : $()                                 // id: %6
} // end sil function '$ss23_ContiguousArrayStorageCfD'

// _ContiguousArrayStorage.init(_doNotCallMeBase:)
sil @$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfc : $@convention(method) <τ_0_0> (@owned _ContiguousArrayStorage<τ_0_0>) -> @owned _ContiguousArrayStorage<τ_0_0>

// _ContiguousArrayStorage.deinit
sil public_external @$ss23_ContiguousArrayStorageCfd : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> @owned Builtin.NativeObject {
[%0: escape => %r, escape c*.v** => %r.c*.v**]
// %0                                             // users: %14, %13, %3, %2
bb0(%0 : $_ContiguousArrayStorage<Element>):
  // function_ref _ContiguousArrayStorage._elementPointer.getter
  %1 = function_ref @$ss23_ContiguousArrayStorageC15_elementPointerSpyxGvg : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> UnsafeMutablePointer<τ_0_0> // user: %2
  %2 = apply %1<Element>(%0) : $@convention(method) <τ_0_0> (@guaranteed _ContiguousArrayStorage<τ_0_0>) -> UnsafeMutablePointer<τ_0_0> // user: %12
  %3 = upcast %0 : $_ContiguousArrayStorage<Element> to $__ContiguousArrayStorageBase // user: %4
  %4 = ref_element_addr %3 : $__ContiguousArrayStorageBase, #__ContiguousArrayStorageBase.countAndCapacity // user: %5
  %5 = struct_element_addr %4 : $*_ArrayBody, #_ArrayBody._storage // user: %6
  %6 = struct_element_addr %5 : $*_SwiftArrayBodyStorage, #_SwiftArrayBodyStorage.count // user: %7
  %7 = struct_element_addr %6 : $*Int, #Int._value // user: %8
  %8 = load %7 : $*Builtin.Int64                  // user: %9
  %9 = builtin "assumeNonNegative_Int64"(%8 : $Builtin.Int64) : $Builtin.Int64 // user: %10
  %10 = struct $Int (%9 : $Builtin.Int64)         // user: %12
  // function_ref UnsafeMutablePointer.deinitialize(count:)
  %11 = function_ref @$sSp12deinitialize5countSvSi_tF : $@convention(method) <τ_0_0> (Int, UnsafeMutablePointer<τ_0_0>) -> UnsafeMutableRawPointer // user: %12
  %12 = apply %11<Element>(%10, %2) : $@convention(method) <τ_0_0> (Int, UnsafeMutablePointer<τ_0_0>) -> UnsafeMutableRawPointer
  fix_lifetime %0 : $_ContiguousArrayStorage<Element> // id: %13
  %14 = unchecked_ref_cast %0 : $_ContiguousArrayStorage<Element> to $Builtin.NativeObject // user: %15
  return %14 : $Builtin.NativeObject              // id: %15
} // end sil function '$ss23_ContiguousArrayStorageCfd'

// _ContiguousArrayStorage._elementPointer.getter
sil public_external @$ss23_ContiguousArrayStorageC15_elementPointerSpyxGvg : $@convention(method) <Element> (@guaranteed _ContiguousArrayStorage<Element>) -> UnsafeMutablePointer<Element> {
[%0: noescape, escape c*.v** => %r.s0.v**]
// %0                                             // user: %1
bb0(%0 : $_ContiguousArrayStorage<Element>):
  %1 = ref_tail_addr %0 : $_ContiguousArrayStorage<Element>, $Element // user: %2
  %2 = address_to_pointer %1 : $*Element to $Builtin.RawPointer // user: %3
  %3 = struct $UnsafeMutablePointer<Element> (%2 : $Builtin.RawPointer) // user: %4
  return %3 : $UnsafeMutablePointer<Element>      // id: %4
} // end sil function '$ss23_ContiguousArrayStorageC15_elementPointerSpyxGvg'

// UnsafeMutablePointer.deinitialize(count:)
sil public_external @$sSp12deinitialize5countSvSi_tF : $@convention(method) <Pointee> (Int, UnsafeMutablePointer<Pointee>) -> UnsafeMutableRawPointer {
[%1: escape v** => %r.s0.v**]
// %0                                             // user: %4
// %1                                             // user: %3
bb0(%0 : $Int, %1 : $UnsafeMutablePointer<Pointee>):
  %2 = metatype $@thick Pointee.Type              // user: %6
  %3 = struct_extract %1 : $UnsafeMutablePointer<Pointee>, #UnsafeMutablePointer._rawValue // users: %7, %6
  %4 = struct_extract %0 : $Int, #Int._value      // user: %5
  %5 = builtin "truncOrBitCast_Int64_Word"(%4 : $Builtin.Int64) : $Builtin.Word // user: %6
  %6 = builtin "destroyArray"<Pointee>(%2 : $@thick Pointee.Type, %3 : $Builtin.RawPointer, %5 : $Builtin.Word) : $()
  %7 = struct $UnsafeMutableRawPointer (%3 : $Builtin.RawPointer) // user: %8
  return %7 : $UnsafeMutableRawPointer            // id: %8
} // end sil function '$sSp12deinitialize5countSvSi_tF'

// __SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
sil public_external @$ss41__SwiftNativeNSArrayWithContiguousStorageCfD : $@convention(method) (@owned __SwiftNativeNSArrayWithContiguousStorage) -> () {
[%0: noescape **]
// %0                                             // user: %1
bb0(%0 : $__SwiftNativeNSArrayWithContiguousStorage):
  dealloc_ref %0 : $__SwiftNativeNSArrayWithContiguousStorage // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function '$ss41__SwiftNativeNSArrayWithContiguousStorageCfD'

sil_vtable _ContiguousArrayStorage {
  #__SwiftNativeNSArray.init!allocator: (__SwiftNativeNSArray.Type) -> () -> __SwiftNativeNSArray : @$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC [inherited]	// __SwiftNativeNSArrayWithContiguousStorage.__allocating_init()
  #__ContiguousArrayStorageBase.init!allocator: (__ContiguousArrayStorageBase.Type) -> (()) -> __ContiguousArrayStorageBase : @$ss23_ContiguousArrayStorageC16_doNotCallMeBaseAByxGyt_tcfC [override]	// _ContiguousArrayStorage.__allocating_init(_doNotCallMeBase:)
  #__ContiguousArrayStorageBase.canStoreElements: (__ContiguousArrayStorageBase) -> (any Any.Type) -> Bool : @$ss23_ContiguousArrayStorageC16canStoreElements13ofDynamicTypeSbypXp_tF [override]	// _ContiguousArrayStorage.canStoreElements(ofDynamicType:)
  #__ContiguousArrayStorageBase.staticElementType!getter: (__ContiguousArrayStorageBase) -> () -> any Any.Type : @$ss23_ContiguousArrayStorageC17staticElementTypeypXpvg [override]	// _ContiguousArrayStorage.staticElementType.getter
  #_ContiguousArrayStorage.deinit!deallocator: @$ss23_ContiguousArrayStorageCfD	// _ContiguousArrayStorage.__deallocating_deinit
}

sil_vtable __SwiftNativeNSArrayWithContiguousStorage {
  #__SwiftNativeNSArray.init!allocator: (__SwiftNativeNSArray.Type) -> () -> __SwiftNativeNSArray : @$ss41__SwiftNativeNSArrayWithContiguousStorageCABycfC [override]	// __SwiftNativeNSArrayWithContiguousStorage.__allocating_init()
  #__SwiftNativeNSArrayWithContiguousStorage.deinit!deallocator: @$ss41__SwiftNativeNSArrayWithContiguousStorageCfD	// __SwiftNativeNSArrayWithContiguousStorage.__deallocating_deinit
}

sil_witness_table hidden Duck: Swimmer module swimmer {
  method #Swimmer.swim: <Self where Self : Swimmer> (Self) -> () -> () : @$s7swimmer4DuckVAA7SwimmerA2aDP4swimyyFTW	// protocol witness for Swimmer.swim() in conformance Duck
}

sil_witness_table hidden Fish: Swimmer module swimmer {
  method #Swimmer.swim: <Self where Self : Swimmer> (Self) -> () -> () : @$s7swimmer4FishVAA7SwimmerA2aDP4swimyyFTW	// protocol witness for Swimmer.swim() in conformance Fish
}



// Mappings from '#fileID' to '#filePath':
//   'swimmer/swimmer.swift' => 'src/swimmer.swift'


