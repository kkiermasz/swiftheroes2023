sil_stage canonical

import Builtin
import Swift
import SwiftShims

protocol Conference {
  func organise()
}

struct SwiftHeroes : Conference {
  func organise()
  init()
}

@_hasStorage @_hasInitialValue let swiftHeroes: SwiftHeroes { get }

func organise(_ conference: some Conference)

// swiftHeroes
sil_global hidden [let] @main.swiftHeroes : main.SwiftHeroes : $SwiftHeroes

// main
sil @main : $@convention(c) (Int32, UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>) -> Int32 {
[%1: noescape **]
[global: read,write,copy]
bb0(%0 : $Int32, %1 : $UnsafeMutablePointer<Optional<UnsafeMutablePointer<Int8>>>):
  alloc_global @main.swiftHeroes : main.SwiftHeroes // id: %2
  %3 = global_addr @main.swiftHeroes : main.SwiftHeroes : $*SwiftHeroes // user: %5
  %4 = struct $SwiftHeroes ()                     // user: %5
  store %4 to %3 : $*SwiftHeroes                  // id: %5
  %6 = integer_literal $Builtin.Int32, 0          // user: %7
  %7 = struct $Int32 (%6 : $Builtin.Int32)        // user: %8
  return %7 : $Int32                              // id: %8
} // end sil function 'main'

// SwiftHeroes.organise()
sil hidden @main.SwiftHeroes.organise() -> () : $@convention(method) (SwiftHeroes) -> () {
[global: ]
// %0 "self"                                      // user: %1
bb0(%0 : $SwiftHeroes):
  debug_value %0 : $SwiftHeroes, let, name "self", argno 1, implicit // id: %1
  %2 = tuple ()                                   // user: %3
  return %2 : $()                                 // id: %3
} // end sil function 'main.SwiftHeroes.organise() -> ()'

// SwiftHeroes.init()
sil hidden @main.SwiftHeroes.init() -> main.SwiftHeroes : $@convention(method) (@thin SwiftHeroes.Type) -> SwiftHeroes {
[global: ]
// %0 "$metatype"
bb0(%0 : $@thin SwiftHeroes.Type):
  %1 = struct $SwiftHeroes ()                     // user: %2
  return %1 : $SwiftHeroes                        // id: %2
} // end sil function 'main.SwiftHeroes.init() -> main.SwiftHeroes'

// protocol witness for Conference.organise() in conformance SwiftHeroes
sil private [transparent] [thunk] @protocol witness for main.Conference.organise() -> () in conformance main.SwiftHeroes : main.Conference in main : $@convention(witness_method: Conference) (@in_guaranteed SwiftHeroes) -> () {
[global: ]
bb0(%0 : $*SwiftHeroes):
  %1 = tuple ()                                   // user: %2
  return %1 : $()                                 // id: %2
} // end sil function 'protocol witness for main.Conference.organise() -> () in conformance main.SwiftHeroes : main.Conference in main'

// organise<A>(_:)
sil hidden @main.organise<A where A: main.Conference>(A) -> () : $@convention(thin) <<anonymous> where <anonymous> : Conference> (@in_guaranteed <anonymous>) -> () {
[%0: read v**, write v**, copy v**, destroy v**]
[global: read,write,copy,destroy,allocate,deinit_barrier]
// %0 "conference"                                // users: %3, %1
bb0(%0 : $*some Conference):
  debug_value %0 : $*some Conference, let, name "conference", argno 1, expr op_deref // id: %1
  %2 = witness_method $some Conference, #Conference.organise : <Self where Self : Conference> (Self) -> () -> () : $@convention(witness_method: Conference) <τ_0_0 where τ_0_0 : Conference> (@in_guaranteed τ_0_0) -> () // user: %3
  %3 = apply %2<some Conference>(%0) : $@convention(witness_method: Conference) <τ_0_0 where τ_0_0 : Conference> (@in_guaranteed τ_0_0) -> ()
  %4 = tuple ()                                   // user: %5
  return %4 : $()                                 // id: %5
} // end sil function 'main.organise<A where A: main.Conference>(A) -> ()'

sil_witness_table hidden SwiftHeroes: Conference module main {
  method #Conference.organise: <Self where Self : Conference> (Self) -> () -> () : @protocol witness for main.Conference.organise() -> () in conformance main.SwiftHeroes : main.Conference in main	// protocol witness for Conference.organise() in conformance SwiftHeroes
}



// Mappings from '#fileID' to '#filePath':
//   'main/struct-protocol-generics.swift' => 'src/struct-protocol-generics.swift'


